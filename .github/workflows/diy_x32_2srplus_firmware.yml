#==========================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#
# https://github.com/KFERMercer/OpenWrt-CI
#
# https://github.com/1orz/My-action
#
# https://github.com/garypang13/Actions-OpenWrt-Nginx
#
#==========================================================

name: OpenWrt_x86_32_Generic_full_drive

on:
  # release:
  #   types: [published]
  watch:
    types: [started]
  schedule:
    - cron: 00 10 * * 6

env:
  TARGET: Openwrt_x86_32_full_drive
  REPO_URL: https://github.com/coolsnowwolf/lede
  # REPO_URL: https://github.com/u0225/lede
  ### -+-+-
  REPO_BRANCH: master
  # REPO_BRANCH: r8.1.12
  # REPO_BRANCH: r9.8.17
  # REPO_BRANCH: r9.10.10
  # REPO_BRANCH: 20200408
  # REPO_BRANCH: 20200416
  # REPO_BRANCH: r20.5.20
  ### -+-+-
  BRANCH_SET: armt/master.sh
  # BRANCH_SET: armt/r89.sh
  # BRANCH_SET: armt/r20.sh
  ### -+-+-
  VPS_S: 2SRPlus
  # VPS_S: PSW
  ### -+-+-
  # VPS_M: vps/arm.ssr
  # VPS_M: vps/arm.psw
  VPS_M: vps/x86.ssr
  # VPS_M: vps/x86.psw
  ### -+-+-
  CONFIG_FILE: config/.config
  FEEDS_FILE: feeds.default
  ARM_SET: armt/armt-set.sh
  X86_DIY: diy/diy.sh
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: Build OpenWrt
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-18.04
    # runs-on: ubuntu-16.04

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget
          # sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          curl -fsSL https://raw.githubusercontent.com/u0225/openwrt_lede_actions/master/.bashrc >> ~/.bashrc
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          df -h

      - name: Clone openwrt
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH lede
          chmod -R 775 ./
          cd lede
          cp ../${{ env.FEEDS_FILE }} feeds.conf.default
          ../$BRANCH_SET
          ../others.sh
          chmod -R 775 ../

      - name: Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p -m 777 lede/build_dir /mnt/lede/dl /mnt/lede/staging_dir /mnt/lede/build_dir/hostpkg /mnt/lede/build_dir/host
          ln -s /mnt/lede/build_dir/hostpkg lede/build_dir/hostpkg
          ln -s /mnt/lede/build_dir/host lede/build_dir/host
          ln -s /mnt/lede/dl lede/dl
          ln -s /mnt/lede/staging_dir lede/staging_dir
          df -h

      - name: Git pull Update feeds and install
        run: |
          cd lede
          git pull
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          df -h

      - name: Load custom configuration
        run: |
          rm -f lede/.config*
          touch lede/.config
          cat diy/x32 >> lede/.config
          cat diy/Setting >> lede/.config
          cat diy/drive >> lede/.config
          cat diy/luci-app >> lede/.config
          # cat diy/lite >> lede/.config
          cat diy/samba4 >> lede/.config
          # cat diy/samba36 >> lede/.config
          # cat diy/mwan3 >> lede/.config
          cat ${{ env.VPS_M }} >> lede/.config
          cd lede
          ../$X86_DIY
          ./scripts/feeds install -a
          make defconfig

      - name: Make download
        run: |
          cd lede
          make download -j8
          find ./dl/ -size -1024c -exec rm -f {} \;
          df -h

      - name: Compile firmware
        run: |
          cd lede
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Get current date
        id: date
        run: |
          echo "::set-env name=date::$(date +'%Y-%m-%d')"
          echo "::set-env name=date1::$(date +'%y%m%d')"
          echo "::set-env name=date2::$(date +'%Y-%m-%d_%H.%M')"
          echo "::set-env name=date3::$(date +'%Y-%m-%d_%H.%M.%S')"

      # - name: Upload entire bin directory
      #   uses: actions/upload-artifact@master
      #   if: always()
      #   with:
      #     name: ${{ env.date1 }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_bin_all
      #     path: lede/bin

      - name: Prepare ipk packages artifact
        run: mkdir ./ipk && mkdir ./ipk/targets && cp -r ./lede/bin/targets/*/*/packages ./ipk/targets/packages && cp -r ./lede/bin/packages ./ipk

      - name: Upload ipk packages artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.date }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_ipk
          path: ./ipk

      # - name: Prepare artifact
      #   run: find lede/bin/targets/ -type d -name "packages" | xargs rm -rf {}

      # - name: Upload artifact
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: ${{ env.date1 }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_firmware_all
      #     path: lede/bin/targets/

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          mkdir firmware && find lede/bin/targets/*/*/* -maxdepth 0 -name "*uefi-gpt*" -or -name "*combined*" -or -name "*.vmdk" -or -name "*vmlinuz" -or -name "*.seed" -or -name "*.manifest" -or -name "sha256sums" | xargs -i mv -f {} ./firmware/
          cp lede/.config ./firmware/${{ env.date1 }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}.config
          cd firmware
          echo "::set-env name=FIRMWARE::$PWD"
          echo "::set-output name=status::success"

      - name: Prepare Upload firmware artifact
        uses: actions/upload-artifact@master
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: ${{ env.date }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_firmware
          path: ${{ env.FIRMWARE }}
