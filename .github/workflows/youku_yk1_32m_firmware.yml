#==========================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#
# https://github.com/KFERMercer/OpenWrt-CI
#
# https://github.com/1orz/My-action
#
# https://github.com/garypang13/Actions-OpenWrt-Nginx
#
#==========================================================

name: OpenWrt_youku-yk1-32m_firmware

on:
  watch:
    types: [started]
  schedule:
    - cron: 00 10 * * 6

env:
  REPO_URL: https://github.com/u0225/lede
  # REPO_BRANCH: master
  REPO_BRANCH: r8.1.12
  # REPO_BRANCH: r9.8.17
  # REPO_BRANCH: r9.10.10
  # REPO_BRANCH: 20200408
  # REPO_BRANCH: 20200416
  # REPO_BRANCH: r20.5.20
  TARGET: Openwrt_youku-yk1-32m
  CONFIG_FILE: config/r9.10.10/youku-yk1.config
  SET_SH: armt/armt_set.sh
  R89_SH: armt/r89.sh
  R20_SH: armt/r20.sh
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: Build OpenWrt
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-18.04
    # runs-on: ubuntu-16.04

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          # sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint
          # sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          curl -fsSL https://raw.githubusercontent.com/u0225/openwrt_lede_actions/master/.bashrc >> ~/.bashrc
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          df -h

      - name: Clone openwrt
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH lede
          chmod -R 775 ./
          # cd lede
          # sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          # echo "src-git lienol https://github.com/u0225/psw_single" >> ./feeds.conf.default

      - name: Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p -m 777 lede/build_dir /mnt/lede/dl /mnt/lede/staging_dir /mnt/lede/build_dir/hostpkg /mnt/lede/build_dir/host
          ln -s /mnt/lede/build_dir/hostpkg lede/build_dir/hostpkg
          ln -s /mnt/lede/build_dir/host lede/build_dir/host
          ln -s /mnt/lede/dl lede/dl
          ln -s /mnt/lede/staging_dir lede/staging_dir
          df -h

      - name: Git pull Update feeds and install
        run: |
          cd lede
          # git pull
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          df -h

      - name: Load custom configuration
        run: |
          rm -f lede/.config*
          touch lede/.config
          # chmod +x $SET_SH
          # chmod +x $R89_SH
          # chmod +x $R20_SH
          $R89_SH
          # $R20_SH
          cat armt/youku_yk1_32m >> lede/.config
          cat armt/armt_luci_app_16m >> lede/.config
          # cat armt/armt_luci_app_16m_default >> lede/.config
          cd lede
          ../$SET_SH
          ./scripts/feeds install -a
          make defconfig

      - name: Make download
        run: |
          cd lede
          make download -j8
          find ./dl/ -size -1024c -exec rm -f {} \;
          df -h

      - name: Compile firmware
        run: |
          cd lede
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Get current date
        id: date
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d')"
          echo "::set-output name=date1::$(date +'%y%m%d')"
          echo "::set-output name=date2::$(date +'%Y-%m-%d_%H.%M')"
          echo "::set-output name=date3::$(date +'%Y-%m-%d_%H.%M.%S')"

      - name: Prepare ipk packages artifact
        run: mkdir ./ipk && mkdir ./ipk/targets && cp -r ./lede/bin/targets/*/*/packages ./ipk/targets/packages && cp -r ./lede/bin/packages ./ipk

      - name: Upload ipk packages artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.TARGET }}_${{ env.REPO_BRANCH }}_ipk_packages_${{steps.date.outputs.date}}
          path: ./ipk

      - name: Prepare artifact
        run: |
          cp lede/.config ./lede/bin/targets/${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{steps.date.outputs.date1}}.config
          find lede/bin/targets/ -type d -name "packages" | xargs rm -rf {}

      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.TARGET }}_${{ env.REPO_BRANCH }}_firmware_${{steps.date.outputs.date}}
          path: lede/bin/targets/
