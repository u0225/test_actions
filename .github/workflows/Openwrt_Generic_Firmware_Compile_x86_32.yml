#==========================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#
# https://github.com/KFERMercer/OpenWrt-CI
#
# https://github.com/1orz/My-action
#
# https://github.com/garypang13/Actions-OpenWrt-Nginx
#
#==========================================================

name: OpenWrt_x86_32_minilite_drive_firmware

on:
  # release:
  #   types: [published]
  watch:
    types: [started]
  # schedule:
  #   - cron: 00 10 * * 6

env:
  TARGET: Openwrt_minilite_drive
  # ------------------- #
  LEAN: true
  # LIENOL: true
  # ARM: true
  # ------------------- #
  # DEFAULT_CONFIG: true
  DIY_CONFIG: true
  # ------------------- #
  CONFIG_FILE: config/.config
  FEEDS_FILE: feeds.default
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: Build OpenWrt
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-18.04
    # runs-on: ubuntu-16.04

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Set env
        id: env
        # if: env.DIY_CONFIG == 'true'
        run: |
          # ========================================= #
          echo "::set-env name=CPU_S::$(echo 'x86')"
          # echo "::set-env name=CPU_S::$(echo 'arm')"
          # ----------------------------------------- #
          echo "::set-env name=PATH_CPU::$(echo 'diy')"
          # echo "::set-env name=PATH_CPU::$(echo '1907')"
          # echo "::set-env name=PATH_CPU::$(echo 'armt')"
          # --------------------------------------------- #
          echo "::set-env name=CPU_M::$(echo '32')"
          # echo "::set-env name=CPU_M::$(echo '64')"
          # echo "::set-env name=CPU_M::$(echo 'miwifi-mini-16m')"
          # echo "::set-env name=CPU_M::$(echo 'wdr3320-16m')"
          # echo "::set-env name=CPU_M::$(echo 'wr8305rt-16m')"
          # echo "::set-env name=CPU_M::$(echo 'youku-yk1-32m')"
          # --------------------------------------------------- #
          echo "::set-env name=PATH_OTH::$(echo 'diy')"
          # echo "::set-env name=PATH_OTH::$(echo '1907')"
          # --------
          echo "::set-env name=others::$(echo 'others')"
          # echo "::set-env name=others::$(echo 'others_1907')"
          # -------------------------------------------------- #
          # echo "::set-env name=VPS_S::$(echo 'psw')"
          # echo "::set-env name=VPS_S::$(echo 'ssr')"
          echo "::set-env name=VPS_S::$(echo 'ssr_new')"
          # ------------------------------------------- #
          # echo "::set-env name=PATH_S::$(echo 'diy')"
          # echo "::set-env name=PATH_S::$(echo '1907')"
          # echo "::set-env name=PATH_S::$(echo 'armt')"
          # ================================================ #
          echo "::set-env name=FREE_UP_DISK::$(echo 'true')"
          echo "::set-env name=SSH_ACTIONS::$(echo 'false')"
          echo "::set-env name=UPLOAD_BIN_DIR::$(echo 'false')"
          echo "::set-env name=UPLOAD_FIRMWARE::$(echo 'true')"
          echo "::set-env name=UPLOAD_COWTRANSFER::$(echo 'false')"
          echo "::set-env name=REPO_TOKEN::$(echo '${{ secrets.REPO_TOKEN }}')"
          echo "::set-env name=UPLOAD_BIN_DIR_FOR_ARTIFACT::$(echo 'false')"
          echo "::set-env name=UPLOAD_FIRMWARE_FOR_ARTIFACT::$(echo 'true')"
          echo "::set-env name=UPLOAD_FIRMWARE_FOR_RELEASE::$(echo 'true')"
          echo "::set-env name=UPLOAD_FIRMWARE_TO_COWTRANSFER::$(echo 'true')"
          echo "::set-env name=UPLOAD_FIRMWARE_TO_WETRANSFER::$(echo 'true')"
          # ================================================================= #

      - name: Lean
        id: lean
        if: env.LEAN == 'true' && env.CPU_S == 'x86'
        run: |
          echo "::set-env name=REPO_URL::$(echo 'https://github.com/coolsnowwolf/lede')"
          echo "::set-env name=REPO_BRANCH::$(echo 'master')"
          echo "::set-env name=X86_DIY::$(echo '../diy/diy.sh')"
          # -----
          echo "::set-env name=drive::$(echo 'cat ${{ env.PATH_CPU }}/drive >> openwrt/.config')"
          echo "::set-env name=mini-lite::$(echo 'cat ${{ env.PATH_CPU }}/mini-lite >> openwrt/.config')"
          echo "::set-env name=samba4::$(echo 'cat ${{ env.PATH_CPU }}/samba4 >> openwrt/.config')"
          # -----
          echo "::set-env name=KERNEL::$(echo '4.19')"
          # echo "::set-env name=KERNEL::$(echo '5.4')"
          # -----
          echo "::set-env name=lean::$(echo 'lean')"

      - name: Lienol
        id: lienol
        if: env.LIENOL == 'true' && env.CPU_S == 'x86'
        run: |
          echo "::set-env name=REPO_URL::$(echo 'https://github.com/Lienol/openwrt')"
          echo "::set-env name=REPO_BRANCH::$(echo 'dev-19.07')"
          echo "::set-env name=feeds_conf::$(echo 'sed -i "s/src-git lienol/# src-git lienol/g" openwrt/feeds.conf.default')"
          # -----
          echo "::set-env name=drive::$(echo 'cat ${{ env.PATH_CPU }}/drive >> openwrt/.config')"
          echo "::set-env name=mini-lite::$(echo 'cat ${{ env.PATH_CPU }}/mini-lite >> openwrt/.config')"
          echo "::set-env name=samba4::$(echo 'cat ${{ env.PATH_CPU }}/samba4 >> openwrt/.config')"
          # -----
          echo "::set-env name=lienol::$(echo 'lienol')"

      - name: Arm
        id: arm
        if: env.ARM == 'true' && env.CPU_S == 'arm'
        run: |
          echo "::set-env name=REPO_URL::$(echo 'https://github.com/u0225/lede')"
          # -------------------------------------------------- #
          # echo "::set-env name=REPO_BRANCH::$(echo 'master')"
          # echo "::set-env name=REPO_BRANCH::$(echo 'r20.5.20')"
          echo "::set-env name=REPO_BRANCH::$(echo 'r8.1.12')"
          # echo "::set-env name=REPO_BRANCH::$(echo 'r9.8.17')"
          # echo "::set-env name=REPO_BRANCH::$(echo 'r9.10.10')"
          # echo "::set-env name=REPO_BRANCH::$(echo '20200408')"
          # echo "::set-env name=REPO_BRANCH::$(echo '20200416')"
          # --------------------------------------------------------- #
          # echo "::set-env name=BRANCH_SET::$(echo './armt/master.sh')"
          echo "::set-env name=BRANCH_SET::$(echo './armt/r89.sh')"
          # echo "::set-env name=BRANCH_SET::$(echo './armt/r20.sh')"
          # ------------------------------------------------------ #
          echo "::set-env name=ARM_SET::$(echo '../armt/armt-set.sh')"
          # -----
          echo "::set-env name=feeds::$(echo 'cp -rf ${{ env.FEEDS_FILE }} openwrt/feeds.conf.default')"
          echo "::set-env name=vps_m::$(echo 'cat vps/${{ env.CPU_S }}.${{ env.VPS_S }} >> openwrt/.config')"
          echo "::set-env name=arm_conf::$(echo 'cat ${{ env.PATH_CPU }}/armt-luci-app-16m >> openwrt/.config')"
          echo "::set-env name=lean::$(echo 'lean')"

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget
          # sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # curl -fsSL https://raw.githubusercontent.com/u0225/openwrt_lede_actions/master/.bashrc >> ~/.bashrc
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          df -h
          chmod -R 775 ./

      - name: Set date
        id: date
        run: |
          echo "::set-env name=date::$(date +'%Y-%m-%d')"
          echo "::set-env name=date1::$(date +'%y%m%d')"
          echo "::set-env name=date2::$(date +'%Y-%m-%d_%H.%M')"
          echo "::set-env name=date3::$(date +'%Y-%m-%d_%H.%M.%S')"

      - name: Set cpu
        id: cpu
        run: |
          echo "::set-env name=cpu::$(echo 'cat ${{ env.PATH_CPU }}/${{ env.CPU_M }} >> openwrt/.config')"

      - name: Set psw
        id: psw
        if: env.VPS_S == 'psw' && env.CPU_S == 'x86'
        run: |
          sed -i "s?cp -rf package-others/vps/luci-app-ssr-plus?# cp -rf package-others/vps/luci-app-ssr-plus?g" ${{ env.PATH_OTH }}/${{ env.others }}.sh
          echo "::set-env name=vps_m::$(echo 'cat vps/${{ env.CPU_S }}.${{ env.VPS_S }} >> openwrt/.config')"

      - name: Set ssr
        id: ssr
        if: env.VPS_S == 'ssr' && env.CPU_S == 'x86'
        run: |
          sed -i "s?cp -rf package-others/vps/psw_single?# cp -rf package-others/vps/psw_single?g" ${{ env.PATH_OTH }}/${{ env.others }}.sh
          echo "::set-env name=vps_m::$(echo 'cat vps/${{ env.CPU_S }}.${{ env.VPS_S }} >> openwrt/.config')"

      - name: Set ssr_new
        id: ssr_new
        if: env.VPS_S == 'ssr_new' && env.CPU_S == 'x86'
        run: |
          sed -i "s?# git clone https://github.com/fw876/helloworld.git?git clone https://github.com/fw876/helloworld.git?g" ${{ env.PATH_OTH }}/${{ env.others }}.sh
          sed -i "s?cp -rf package-others/vps/psw_single?# cp -rf package-others/vps/psw_single?g" ${{ env.PATH_OTH }}/${{ env.others }}.sh
          sed -i "s?cp -rf package-others/vps/luci-app-ssr-plus?# cp -rf package-others/vps/luci-app-ssr-plus?g" ${{ env.PATH_OTH }}/${{ env.others }}.sh
          echo "::set-env name=vps_m::$(echo 'cat vps/${{ env.CPU_S }}.${{ env.VPS_S }} >> openwrt/.config')"

      - name: Clone openwrt
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          chmod -R 775 ./
          ./${{ env.PATH_OTH }}/${{ env.others }}.sh
          ${{ env.feeds_conf }}
          # sed -i "s/src-git lienol/# src-git lienol/g" openwrt/feeds.conf.default
          ${{ env.BRANCH_SET }}
          ${{ env.feeds }}

      - name: Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p -m 777 openwrt/build_dir /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/build_dir/host
          ln -s /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg
          ln -s /mnt/openwrt/build_dir/host openwrt/build_dir/host
          ln -s /mnt/openwrt/dl openwrt/dl
          ln -s /mnt/openwrt/staging_dir openwrt/staging_dir
          df -h

      - name: Git pull Update feeds and install
        run: |
          cd openwrt
          git pull
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          df -h

      - name: Lean KERNEL 4.19
        id: KERNEL
        if: env.LEAN == 'true' && env.KERNEL == '4.19'
        run: |
          sed -i "s?KERNEL_PATCHVER:=5.4?KERNEL_PATCHVER:=4.19?g" openwrt/target/linux/x86/Makefile
          sed -i "s?KERNEL_TESTING_PATCHVER:=5.4?KERNEL_TESTING_PATCHVER:=4.19?g" openwrt/target/linux/x86/Makefile

      - name: Load default configuration
        id: default_config
        if: env.DEFAULT_CONFIG == 'true'
        run: |
          rm -f openwrt/.config*
          touch openwrt/.config
          ${{ env.cpu }}
          ${{ env.vps_m }}
          cd openwrt
          ${{ env.X86_DIY }}
          ${{ env.ARM_SET }}
          ./scripts/feeds install -a
          make defconfig

      - name: Load custom configuration
        id: diy_config
        if: env.DIY_CONFIG == 'true'
        run: |
          rm -f openwrt/.config*
          touch openwrt/.config
          ${{ env.cpu }}
          ${{ env.vps_m }}
          ${{ env.drive }}
          ${{ env.mini-lite }}
          ${{ env.samba4 }}
          ${{ env.arm_conf }}
          cd openwrt
          ${{ env.X86_DIY }}
          ${{ env.ARM_SET }}
          ./scripts/feeds install -a
          make defconfig

      - name: SSH connection to Actions
        uses: garypang13/debugger-action@master
        if: env.SSH_ACTIONS == 'true'

      - name: Make download
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -h

      - name: Compile firmware
        run: |
          cd openwrt
          echo -e "$(($(nproc)+1)) thread compile"
          make -j$(($(nproc)+1)) || make -j1 V=s
          # make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          echo "::set-env name=status::success"

      # - name: Upload entire bin directory
      #   uses: actions/upload-artifact@master
      #   if: always()
      #   with:
      #     name: ${{ env.date1 }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_bin_all
      #     path: openwrt/bin

      - name: Prepare ipk packages artifact
        run: mkdir -p ./ipk/targets && cp -rf ./openwrt/bin/targets/*/*/packages ./ipk/targets/packages && cp -rf ./openwrt/bin/packages ./ipk

      - name: Upload ipk packages artifact
        uses: actions/upload-artifact@master
        with:
          # name: ${{ env.date }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_ipk
          name: ${{ env.date }}_${{ env.lean }}${{ env.lienol }}_${{ env.TARGET }}_${{ env.CPU_S }}_${{ env.CPU_M }}_${{ env.VPS_S }}_ipk
          path: ./ipk

      # - name: Prepare artifact
      #   run: find openwrt/bin/targets/ -type d -name "packages" | xargs rm -rf {}

      # - name: Upload artifact
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: ${{ env.date1 }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_firmware_all
      #     path: openwrt/bin/targets/

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          mkdir firmware && find openwrt/bin/targets/*/*/* -maxdepth 0 -name "*uefi-gpt*" -or -name "*combined-squashfs*.*" -or -name "*.vmdk" -or -name "*vmlinuz" -or -name "config.*" -or -name "*.seed" -or -name "*.manifest" -or -name "sha256sums" | xargs -i mv -f {} ./firmware/
          cp openwrt/.config ./firmware/${{ env.date1 }}_${{ env.lean }}${{ env.lienol }}_${{ env.TARGET }}_${{ env.CPU_S }}_${{ env.CPU_M }}_${{ env.VPS_S }}.config
          cd firmware
          echo "::set-env name=FIRMWARE::$PWD"
          echo "::set-output name=status::success"

      - name: Upload firmware to cowtransfer
        if: env.UPLOAD_FIRMWARE_TO_COWTRANSFER == 'true'
        continue-on-error: true
        run: |
          curl -fsSL git.io/file-transfer | sh
          cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
          cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
          echo "::set-env name=COWURL::$cowurl"
          echo "Download Link: $cowurl"

      - name: Upload firmware to WeTransfer
        if: env.UPLOAD_FIRMWARE_TO_WETRANSFER == 'true'
        continue-on-error: true
        run: |
          curl -fsSL git.io/file-transfer | sh
          wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
          wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
          echo "::set-env name=WETRANS::$wetrans"
          echo "Download Link: $wetrans"

      - name: Create release
        id: create_release
        uses: actions/create-release@master
        continue-on-error: true
        if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          tag_name: ${{ env.date1 }}_${{ env.lean }}${{ env.lienol }}_${{ env.TARGET }}_${{ env.CPU_S }}_${{ env.CPU_M }}_${{ env.VPS_S }}
          release_name: ${{ env.date1 }}_${{ env.lean }}${{ env.lienol }}_${{ env.TARGET }}_${{ env.CPU_S }}_${{ env.CPU_M }}_${{ env.VPS_S }}
          body: |
              墙内加速下载(有效保存时间7天):
              
              奶牛快传: ${{ env.COWURL }}
              
              WeTransfer: ${{ env.WETRANS }}
              
              请分配不低于800M的存储空间
          draft: false
          prerelease: false

      - name: Prepare config and download_link
        run: |
          mkdir ./download_link
          cp -rf ./openwrt/.config ./download_link/${{ env.date1 }}_${{ env.lean }}${{ env.lienol }}_openwrt_${{ env.CPU_S }}_${{ env.CPU_M }}_${{ env.VPS_S }}.config
          echo "有效保存时间7天" >> ./download_link/download_link.txt
          echo "墙内加速下载_奶牛快传: ${{ env.COWURL }}" >> ./download_link/download_link.txt
          echo "墙内加速下载_WeTransfer: ${{ env.WETRANS }}" >> ./download_link/download_link.txt

      - name: Upload download_link artifact
        uses: actions/upload-artifact@master
        with:
          # name: ${{ env.date }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_download_link
          name: ${{ env.date }}_${{ env.lean }}${{ env.lienol }}_${{ env.TARGET }}_${{ env.CPU_S }}_${{ env.CPU_M }}_${{ env.VPS_S }}_download_link
          path: ./download_link

      - name: Upload firmware for release
        uses: csexton/release-asset-action@master
        continue-on-error: true
        if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
        with:
          pattern: "${{ env.FIRMWARE }}/*"
          github-token: ${{ secrets.REPO_TOKEN }}
          release-url: ${{ steps.create_release.outputs.upload_url }}

      - name: Prepare Upload firmware artifact
        uses: actions/upload-artifact@master
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          # name: ${{ env.date }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}_${{ env.VPS_S }}_firmware
          name: ${{ env.date }}_${{ env.lean }}${{ env.lienol }}_${{ env.TARGET }}_${{ env.CPU_S }}_${{ env.CPU_M }}_${{ env.VPS_S }}_firmware
          path: ${{ env.FIRMWARE }}
